/*
 * ******************************************************************************
 *   Copyright 2014-2017 Spectra Logic Corporation. All Rights Reserved.
 *   Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *   this file except in compliance with the License. A copy of the License is located at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   or in the "license" file accompanying this file.
 *   This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *   CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *   specific language governing permissions and limitations under the License.
 * ****************************************************************************
 */

import java.nio.file.Files
import java.nio.file.Path

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.1'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    relocate 'com.google', 'ds3fatjar.com.google'
    relocate 'org.jetbrains', 'ds3fatjar.org.jetbrains'
    relocate 'org.intellij', 'ds3fatjar.org.intellij'
    relocate 'org.codehaus', 'ds3fatjar.org.codehaus'
    relocate 'kotlin', 'ds3fatjar.kotlin'
    relocate 'edu.umd', 'ds3fatjar.edu.emd'
    relocate 'net.jcip', 'ds3fatjar.net.jcip'
    relocate 'com.ctc', 'ds3fatjar.com.ctc'
    relocate 'org.apache', 'ds3fatjar.org.apache'
    relocate 'com.fasterxml', 'ds3fatjar.com.fasterxml'
    dependencies {
        exclude(dependency("org.hamcrest:hamcrest-library:$hamcrestVersion"))
        exclude(dependency("org.mockito:mockito-core:$mockitoVersion"))
        exclude(dependency("junit:junit:$junitVersion"))
        exclude(dependency("org.slf4j:slf4j-api:$slf4jVersion"))
        exclude(dependency("org.slf4j:slf4j-simple:$slf4jVersion"))
        exclude(dependency("org.apache.commons:commons-lang3:$commonslangVersion"))
    }

    mergeServiceFiles()
}

artifacts {
    archives shadowJar
}

task genConfigProperties {
    doLast {
        def productionBuild = System.getenv('productionBuild')
        if (productionBuild == null) { productionBuild = 'false' }

        File configFile = new File(sourceSets.main.output.resourcesDir, "/ds3_sdk.properties")
        Path configPath = sourceSets.main.output.resourcesDir.toPath()
        if (!Files.exists(configPath)) {
            Files.createDirectories(configPath)
        }

        configFile.withWriter{out ->
            out.writeLine("productionBuild=" + productionBuild.toString())
            out.writeLine("version=" + version.toString())
            out.writeLine("build.date=" + new Date().toString())
        }
    }
}

task zip(type: Zip) {
  from configurations.runtime.allArtifacts.files
  from configurations.runtime
  into (project.name + "-" + project.version)
}

zip.dependsOn jar

jar {
    from sourceSets.main.allJava
}

jar.dependsOn genConfigProperties

dependencies {
    compile     "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile     "org.apache.httpcomponents:httpclient:$httpclientVersion"
    compile     "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
    compile     "com.fasterxml.jackson.dataformat:jackson-dataformat-xml:$jacksonVersion"
    compile     "com.google.guava:guava:$guavaVersion"
    compile     'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
    compile     'com.google.code.findbugs:annotations:3.0.1'
    testCompile "org.hamcrest:hamcrest-library:$hamcrestVersion"
}
