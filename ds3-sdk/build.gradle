/*
 * ****************************************************************************
 *    Copyright 2014-2016 Spectra Logic Corporation. All Rights Reserved.
 *    Licensed under the Apache License, Version 2.0 (the "License"). You may not use
 *    this file except in compliance with the License. A copy of the License is located at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 *    or in the "license" file accompanying this file.
 *    This file is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 *    CONDITIONS OF ANY KIND, either express or implied. See the License for the
 *    specific language governing permissions and limitations under the License.
 *  ****************************************************************************
 */

import java.nio.file.Files
import java.nio.file.Path

buildscript {
    repositories { jcenter() }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}

apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    relocate 'com.google', 'ds3fatjar.com.google'
    relocate 'org.apache', 'ds3fatjar.org.apache'
    relocate 'org.codehaus', 'ds3fatjar.org.codehaus'
    relocate 'com.fasterxml', 'ds3fatjar.com.fasterxml'
    dependencies {
        exclude(dependency('org.hamcrest:hamcrest-library:1.3'))
        exclude(dependency('org.mockito:mockito-core:1.10.19'))
        exclude(dependency('junit:junit:4.12'))
        exclude(dependency('org.slf4j:slf4j-api:1.7.16'))
        exclude(dependency('org.slf4j:slf4j-simple:1.7.20'))
    }
}

artifacts {
    archives shadowJar
}

task genConfigProperties << {
    def productionBuild = System.getenv('productionBuild')
    if (productionBuild == null) { productionBuild = 'false' }

    File configFile = new File(sourceSets.main.output.resourcesDir, "/ds3_sdk.properties")
    Path configPath = sourceSets.main.output.resourcesDir.toPath()
    if (!Files.exists(configPath)) {
        Files.createDirectories(configPath)
    }

    configFile.withWriter{out ->
        out.writeLine("productionBuild=" + productionBuild.toString())
    }
}

task zip(type: Zip) {
  from configurations.runtime.allArtifacts.files
  from configurations.runtime
  into (project.name + "-" + project.version)
}

zip.dependsOn jar

jar {
    from sourceSets.main.allJava
}

jar.dependsOn genConfigProperties

dependencies {
    compile     'org.apache.httpcomponents:httpclient:4.5.1'
    compile     'commons-codec:commons-codec:1.10'
    compile     'commons-io:commons-io:2.4'
    compile     'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
    compile     'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.7.1'
    compile     'com.google.guava:guava:19.0'
    compile     'com.google.code.findbugs:annotations:3.0.1'
    compile group: 'net.java.dev.jna', name: 'jna-platform', version: '4.2.2'
    compile group: 'net.java.dev.jna', name: 'jna', version: '4.2.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'
}
